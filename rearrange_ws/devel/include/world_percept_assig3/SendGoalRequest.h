// Generated by gencpp from file world_percept_assig3/SendGoalRequest.msg
// DO NOT EDIT!


#ifndef WORLD_PERCEPT_ASSIG3_MESSAGE_SENDGOALREQUEST_H
#define WORLD_PERCEPT_ASSIG3_MESSAGE_SENDGOALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace world_percept_assig3
{
template <class ContainerAllocator>
struct SendGoalRequest_
{
  typedef SendGoalRequest_<ContainerAllocator> Type;

  SendGoalRequest_()
    : target_name()
    , target_x(0.0)
    , target_y(0.0)
    , target_orientation_z(0.0)
    , target_orientation_w(0.0)  {
    }
  SendGoalRequest_(const ContainerAllocator& _alloc)
    : target_name(_alloc)
    , target_x(0.0)
    , target_y(0.0)
    , target_orientation_z(0.0)
    , target_orientation_w(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_name_type;
  _target_name_type target_name;

   typedef double _target_x_type;
  _target_x_type target_x;

   typedef double _target_y_type;
  _target_y_type target_y;

   typedef double _target_orientation_z_type;
  _target_orientation_z_type target_orientation_z;

   typedef double _target_orientation_w_type;
  _target_orientation_w_type target_orientation_w;





  typedef boost::shared_ptr< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendGoalRequest_

typedef ::world_percept_assig3::SendGoalRequest_<std::allocator<void> > SendGoalRequest;

typedef boost::shared_ptr< ::world_percept_assig3::SendGoalRequest > SendGoalRequestPtr;
typedef boost::shared_ptr< ::world_percept_assig3::SendGoalRequest const> SendGoalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator1> & lhs, const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_name == rhs.target_name &&
    lhs.target_x == rhs.target_x &&
    lhs.target_y == rhs.target_y &&
    lhs.target_orientation_z == rhs.target_orientation_z &&
    lhs.target_orientation_w == rhs.target_orientation_w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator1> & lhs, const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_percept_assig3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdfa55e98bb48dbef0b27fec93487a33";
  }

  static const char* value(const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdfa55e98bb48dbeULL;
  static const uint64_t static_value2 = 0xf0b27fec93487a33ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_percept_assig3/SendGoalRequest";
  }

  static const char* value(const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SendGoal.srv\n"
"string target_name\n"
"float64 target_x\n"
"float64 target_y\n"
"float64 target_orientation_z\n"
"float64 target_orientation_w\n"
;
  }

  static const char* value(const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_name);
      stream.next(m.target_x);
      stream.next(m.target_y);
      stream.next(m.target_orientation_z);
      stream.next(m.target_orientation_w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendGoalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_percept_assig3::SendGoalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_percept_assig3::SendGoalRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_name);
    s << indent << "target_x: ";
    Printer<double>::stream(s, indent + "  ", v.target_x);
    s << indent << "target_y: ";
    Printer<double>::stream(s, indent + "  ", v.target_y);
    s << indent << "target_orientation_z: ";
    Printer<double>::stream(s, indent + "  ", v.target_orientation_z);
    s << indent << "target_orientation_w: ";
    Printer<double>::stream(s, indent + "  ", v.target_orientation_w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_PERCEPT_ASSIG3_MESSAGE_SENDGOALREQUEST_H
