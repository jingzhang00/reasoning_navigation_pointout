// Generated by gencpp from file world_percept_assig3/LoadKnowledgeResponse.msg
// DO NOT EDIT!


#ifndef WORLD_PERCEPT_ASSIG3_MESSAGE_LOADKNOWLEDGERESPONSE_H
#define WORLD_PERCEPT_ASSIG3_MESSAGE_LOADKNOWLEDGERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace world_percept_assig3
{
template <class ContainerAllocator>
struct LoadKnowledgeResponse_
{
  typedef LoadKnowledgeResponse_<ContainerAllocator> Type;

  LoadKnowledgeResponse_()
    : confirm(false)  {
    }
  LoadKnowledgeResponse_(const ContainerAllocator& _alloc)
    : confirm(false)  {
  (void)_alloc;
    }



   typedef uint8_t _confirm_type;
  _confirm_type confirm;





  typedef boost::shared_ptr< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LoadKnowledgeResponse_

typedef ::world_percept_assig3::LoadKnowledgeResponse_<std::allocator<void> > LoadKnowledgeResponse;

typedef boost::shared_ptr< ::world_percept_assig3::LoadKnowledgeResponse > LoadKnowledgeResponsePtr;
typedef boost::shared_ptr< ::world_percept_assig3::LoadKnowledgeResponse const> LoadKnowledgeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator1> & lhs, const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.confirm == rhs.confirm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator1> & lhs, const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_percept_assig3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b37994baa157ef8535427a2de0e06206";
  }

  static const char* value(const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb37994baa157ef85ULL;
  static const uint64_t static_value2 = 0x35427a2de0e06206ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_percept_assig3/LoadKnowledgeResponse";
  }

  static const char* value(const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  Response is a boolean called “confirm”\n"
"bool confirm\n"
;
  }

  static const char* value(const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.confirm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoadKnowledgeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_percept_assig3::LoadKnowledgeResponse_<ContainerAllocator>& v)
  {
    s << indent << "confirm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confirm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_PERCEPT_ASSIG3_MESSAGE_LOADKNOWLEDGERESPONSE_H
