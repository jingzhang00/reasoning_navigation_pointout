// Generated by gencpp from file world_percept_assig3/GetSceneObjectListResponse.msg
// DO NOT EDIT!


#ifndef WORLD_PERCEPT_ASSIG3_MESSAGE_GETSCENEOBJECTLISTRESPONSE_H
#define WORLD_PERCEPT_ASSIG3_MESSAGE_GETSCENEOBJECTLISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gazebo_msgs/ModelStates.h>

namespace world_percept_assig3
{
template <class ContainerAllocator>
struct GetSceneObjectListResponse_
{
  typedef GetSceneObjectListResponse_<ContainerAllocator> Type;

  GetSceneObjectListResponse_()
    : obj_found(false)
    , objects()
    , message()  {
    }
  GetSceneObjectListResponse_(const ContainerAllocator& _alloc)
    : obj_found(false)
    , objects(_alloc)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _obj_found_type;
  _obj_found_type obj_found;

   typedef  ::gazebo_msgs::ModelStates_<ContainerAllocator>  _objects_type;
  _objects_type objects;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetSceneObjectListResponse_

typedef ::world_percept_assig3::GetSceneObjectListResponse_<std::allocator<void> > GetSceneObjectListResponse;

typedef boost::shared_ptr< ::world_percept_assig3::GetSceneObjectListResponse > GetSceneObjectListResponsePtr;
typedef boost::shared_ptr< ::world_percept_assig3::GetSceneObjectListResponse const> GetSceneObjectListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator1> & lhs, const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.obj_found == rhs.obj_found &&
    lhs.objects == rhs.objects &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator1> & lhs, const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_percept_assig3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a002ec9697f31a7c31d8cda3e8964929";
  }

  static const char* value(const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa002ec9697f31a7cULL;
  static const uint64_t static_value2 = 0x31d8cda3e8964929ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_percept_assig3/GetSceneObjectListResponse";
  }

  static const char* value(const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# true if the target object was in the list\n"
"bool obj_found\n"
"# Target object, it could be one object or all the objects.\n"
"\n"
"gazebo_msgs/ModelStates objects\n"
"\n"
"# Message in case of error\n"
"string message\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: gazebo_msgs/ModelStates\n"
"# broadcast all model states in world frame\n"
"string[] name                 # model names\n"
"geometry_msgs/Pose[] pose     # desired pose in world frame\n"
"geometry_msgs/Twist[] twist   # desired twist in world frame\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_found);
      stream.next(m.objects);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSceneObjectListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_percept_assig3::GetSceneObjectListResponse_<ContainerAllocator>& v)
  {
    s << indent << "obj_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obj_found);
    s << indent << "objects: ";
    s << std::endl;
    Printer< ::gazebo_msgs::ModelStates_<ContainerAllocator> >::stream(s, indent + "  ", v.objects);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_PERCEPT_ASSIG3_MESSAGE_GETSCENEOBJECTLISTRESPONSE_H
